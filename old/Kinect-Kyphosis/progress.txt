What We've Accomplished:

1. First 2 weeks were set aside for reading and research into implementation ideas
    -> Found that implementing a program based off of the flexicurve 

2. Last Week and this week was beginning work on implementation 
   Implementations:
    -> Coded so a user can select the 3 points on the spine that are necessary
        to calculate kyphosis index of thoracic area
    -> Obtaining depth/distance of each of these points away from kinect
    -> Obtaining Distance between points themselves, to get the length from C7-T12/L1 
        -> Equation for kyphosis Index "height of thoracic"/(len C7 to T12)
    -> Finding furthest depth from the c7 landmark, in order to get the height of the area between the C7 and T12
        -> refer to "The concurrent validity..." or "Spinal Measurment" article for diagram
   
    Accuracy Testing: 
    -> Tested accuracy of depth and distance -> Results summarized in notes
        -> Shows great accuracy 
        -> Found that for best accuracy the figure should be in the gray area in the viewfinder
    -> Obtaining the distance between any of the points selected, 
        -> Not tested on back, but has been tested on basic items 
            -> Showed accuracy


-------------------------------------------------
Methodology: 

1. Have patient stand approx 39inches (1m) at minimum away from viewfinder 
    -> Position until whole back is in the grey area, 
2. Perform Calibration ( done automatically by program)
3. Follow procedures as listed in the README.txt

Limitations Found: 

1. Accuracy of depth can change depending on which pixels are selected, even if they are near by
2. GUI image is a bit difficult to see and select points 


-------------------------------------------------
What needs to be done: 

1. Testing of accuracy on spinal cord: 
    -> Kyphosis index   
    -> Distance between points on back 


Upcoming Plans (2-3 Weeks): 
1. Attempting to improve accuracy (if applicable) using some methods of image filtering 
2. Improve viewfinder to show colors that are based of depth/distance from kinect
    -> Red = close 
3. A GUI 
    -> Blackout the background 
    -> Easier to use GUI 
    -> Attempt to learn how to create graph (ref to "concurrent validity..." article )



Possiblities in the far future: 
1. Cross platform implementation 
    -> using libfreekinect 

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
-------------------------------------------------



-------------------------------------------------
11.11.2021 at 9:30
-------------------------------------------------

-> In this version I have implemented the blacking out of the background (anythin further than 4 feet), along with any noise
-> Anything in the foreground is colored red
-> There is a noticible slow down with the program however, it appears that this is due to adding on the colors

-------------------------------------------------
11.11.2021 at 11:05
-------------------------------------------------

1. Added opencv library 
2. Converted depth image to an opencv readable image, depth values are not touched, and need to test xy mapping


-------------------------------------------------
11.13.2021 at 22:45
-------------------------------------------------

1. Added a window management class in resources
    -> Done for organization purposes
    -> Used to control the opencv window
    -> Will be used to implement a graph if Possible

2. opencv
    -> Convert image done 
    -> Display image done 
    -> Testing blurring and sharpening, atm looking for best image 

To Do: 

1. Shift controls over to opencv window, instead of pygame
    -> Allow program to exit via opencv windows instead of just pygame
    -> Decide Whether to leave pygame window or not

2. Masking of background (blacking out background)
    -> Attempt to implement the custom cropping to get area to focus on
    -> Once a smaller aread of pixels is isolated we will change each pixel to black 
        to isolate foreground image better 

Next Steps: 

1. Use graphing library to display selected coordinates on the spine with reltive distances 
    between each 


-------------------------------------------------
11.14.2021 at 23:45
-------------------------------------------------

1. Moved spinal points selection to openCV window
    -> Revies class that handles all the opencv window managament

To Do: 
1. Passover control to openCV 
    Keybinds Needed: 
    -> Reset 
    -> Calculation button 
    -> Picture Saving 
2. Once all controls are passed over, remove 
    mouse_PTS resource from main.py

For rest view previous 

